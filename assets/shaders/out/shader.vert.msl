#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct SpriteData
{
    packed_float3 position;
    float rotation;
    float2 scale;
    float2 padding;
    float u;
    float v;
    float w;
    float h;
    float4 color;
};

struct type_StructuredBuffer_SpriteData
{
    SpriteData _m0[1];
};

struct type_UBO
{
    float4x4 view_proj;
};

struct Output
{
    float4 position;
    float4 color;
    float2 uv;
};

struct SpriteData_1
{
    float3 position;
    float rotation;
    float2 scale;
    float2 padding;
    float u;
    float v;
    float w;
    float h;
    float4 color;
};

constant float2 _67 = {};

constant spvUnsafeArray<uint, 6> _68 = spvUnsafeArray<uint, 6>({ 0u, 1u, 2u, 2u, 3u, 0u });
constant spvUnsafeArray<float2, 4> _73 = spvUnsafeArray<float2, 4>({ float2(0.0, 1.0), float2(1.0), float2(1.0, 0.0), float2(0.0) });

struct main0_out
{
    float4 out_var_TEXCOORD0 [[user(locn0)]];
    float2 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(constant type_UBO& UBO [[buffer(0)]], const device type_StructuredBuffer_SpriteData& DataBuffer [[buffer(1)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    uint _97 = gl_VertexIndex;
    uint _99 = gl_VertexIndex / 6u;
    uint _89 = _99;
    uint _100 = gl_VertexIndex % 6u;
    uint _90 = _68[_100];
    float3 _88 = float3(DataBuffer._m0[_99].position);
    float _87 = DataBuffer._m0[_99].rotation;
    float2 _86 = DataBuffer._m0[_99].scale;
    float _85 = DataBuffer._m0[_99].u;
    float _84 = DataBuffer._m0[_99].v;
    float _83 = DataBuffer._m0[_99].w;
    float _82 = DataBuffer._m0[_99].h;
    float4 _81 = DataBuffer._m0[_99].color;
    float _115 = DataBuffer._m0[_99].v + DataBuffer._m0[_99].h;
    float _116 = DataBuffer._m0[_99].u + DataBuffer._m0[_99].w;
    spvUnsafeArray<float2, 4> _121 = spvUnsafeArray<float2, 4>({ float2(DataBuffer._m0[_99].u, _115), float2(_116, _115), float2(_116, DataBuffer._m0[_99].v), float2(DataBuffer._m0[_99].u, DataBuffer._m0[_99].v) });
    spvUnsafeArray<float2, 4> _91 = _121;
    float _122 = cos(DataBuffer._m0[_99].rotation);
    float _92 = _122;
    float _123 = sin(DataBuffer._m0[_99].rotation);
    float _93 = _123;
    float2 _94 = _73[_68[_100]];
    float2 _126 = _73[_68[_100]] * DataBuffer._m0[_99].scale;
    _94 = _126;
    float2x2 _130 = float2x2(float2(_122, _123), float2(-_123, _122));
    float2x2 _95 = _130;
    float2 _131 = _130 * _126;
    _94 = _131;
    float2 _134 = _131 + _88.xy;
    float _137 = _134.x;
    float3 _96 = float3(_137, _134.y, _88.z);
    float4 _143 = UBO.view_proj * float4(_137, _134.y, _88.z, 1.0);
    float4 _80 = _143;
    float4 _79 = DataBuffer._m0[_99].color;
    float2 _78 = _91[_68[_100]];
    float4 _77 = _143;
    float4 _76 = DataBuffer._m0[_99].color;
    float2 _75 = _91[_68[_100]];
    out.gl_Position = _143;
    out.out_var_TEXCOORD0 = DataBuffer._m0[_99].color;
    out.out_var_TEXCOORD1 = _91[_68[_100]];
    return out;
}

